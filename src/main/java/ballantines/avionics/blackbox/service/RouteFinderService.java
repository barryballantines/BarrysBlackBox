package ballantines.avionics.blackbox.service;

import ballantines.avionics.blackbox.model.Waypoint;
import ballantines.avionics.blackbox.util.Calculus;
import ballantines.avionics.blackbox.util.Log;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.html.HTMLFormElement;
import org.w3c.dom.html.HTMLInputElement;

/**
 *
 * @author mbuse
 */
public class RouteFinderService {
    
    private static final Log L = Log.forClass(RouteFinderService.class);
    private static final String ROUTE_FINDER_URL = "http://rfinder.asalink.net/free/";
    
    /**
     * The URL for the free Route Finder service, provided by asalink.net
     * 
     * @return "http://rfinder.asalink.net/free/"
     */
    public String getRouteFinderURL() {
        return ROUTE_FINDER_URL;
    }
    
    /**
     * Extracts the form for submitting the route search request from the given
     * HTML document.
     * 
     * This method returns {@code null}, if the HTML does not contain the 
     * route search form, 
     * 
     * @param document  the HTML document
     * @return the form or {@code null}
     */
    public RouteFinderForm extractRouteFinderForm(Document document) {
        HashMap<String, HTMLInputElement> inputFields = new HashMap<>();
        if (document!=null) {
            NodeList formElements = document.getElementsByTagName("form");
            NodeList inputElements = document.getElementsByTagName("input");
            for (int i=0; i<inputElements.getLength(); i++) {
                HTMLInputElement  input = (HTMLInputElement) inputElements.item(i);
                inputFields.put(input.getName(), input);
            }
            if (formElements.getLength()>0 
                    && inputFields.containsKey("id1") 
                    && inputFields.containsKey("id2")) {
                return new RouteFinderForm((HTMLFormElement) formElements.item(0), 
                        inputFields.get("id1"), 
                        inputFields.get("id2"));
            }
        }
        return null;
    }
    
    /**
     * Extracts the detailed route information from the provided HTML document.
     * 
     * The route is a unmodifiable list of {@link Waypoint}s, starting with the 
     * departure airport and ending with the destination airport.
     * 
     * This method returns {@code null} if the provided HTML document does not 
     * contain detailed route information.
     * 
     * @param document  the HTML document
     * @return an unmodifiable list of {@link Waypoint}s or {@code null}
     */
    public List<Waypoint> extractDetailedRouteInformation(Document document) {
        List<Waypoint> route = null;
        String routeAsText = parseDocumentForDetailedRouteInformation(document);
        if (routeAsText!=null) {
            route = parseDetailedRouteInformation(routeAsText);
        }
        return route;
    }
    
    /**
     * Saves the provided route in FlightGear PropertyList format (version 2) to
     * a new file.
     * 
     * This method expects that the route contains the departure and destination 
     * airports as the first and the last waypoint, as provided by the method
     * {@link #extractDetailedRouteInformation(org.w3c.dom.Document)}.
     * 
     * The waypoints between departure and destination are stored as "basic" 
     * waypoints with ident, longitude and latitude.
     * 
     * @param route a list of waypoints including departure and destination airports
     * @param file  the file to store the route to      
     * @throws IOException  if something went wrong during writing the file.
     */
    public void saveRouteToFile(List<Waypoint> route, File file) throws IOException {
        List<Waypoint> modifiableRoute = new ArrayList<>(route);
        
        Waypoint departure = modifiableRoute.remove(0);
        Waypoint destination = modifiableRoute.remove(modifiableRoute.size()-1);
        
        file.createNewFile();
        PrintWriter w = new PrintWriter(file);
        try {
            w.println("<?xml version=\"1.0\"?>");
            w.println("<!-- ====================================================");
            w.println("     Generated by Barry's Blackbox:");
            w.println("       https://barryballantines.github.io/BarrysBlackBox/");
            w.println("");
            w.println("     Based on Route Information provided by ");
            w.println("                        http://rfinder.asalink.net/free/");
            w.println("     ==================================================== -->");
            w.println("<PropertyList>");            
            w.println("  <version type=\"int\">2</version>");           
            w.println("  <departure>");           
            w.println("    <airport type=\"string\">"+departure.ident+"</airport>");           
            w.println("  </departure>");           
            w.println("  <destination>");       
            w.println("    <airport type=\"string\">"+destination.ident+"</airport>");       
            w.println("  </destination>");
            w.println("  <route>");
            
            for (int i=0; i<modifiableRoute.size(); i++) {
                Waypoint wp = modifiableRoute.get(i);
                String n = (i==0) ? "" : " n=\""+i+"\"";
                String lon = String.format(Locale.US, "%.6f", wp.lon);
                String lat = String.format(Locale.US, "%.6f", wp.lat);
                w.println("    <wp"+n+">");
                w.println("      <type type=\"string\">basic</type>");
                w.println("      <ident type=\"string\">"+wp.ident+"</ident>");
                w.println("      <lon type=\"double\">"+lon+"</lon>");
                w.println("      <lat type=\"double\">"+lat+"</lat>");
                w.println("   </wp>");
            }
            
            w.println("  </route>");
            w.println("</PropertyList>");
            w.flush();
        } finally {
            w.close();
        }
    }
    
    /**
     * find the detailed route information in the given HTML document.
     * 
     * For rfinder.asalink.net the detailed route information is the text content of 
     * the first PRE element.
     * 
     * This method returns {@code null} if no PRE element exists.
     * 
     * @param document
     * @return 
     */
    private String parseDocumentForDetailedRouteInformation(Document document) {
        NodeList pres = document.getElementsByTagName("pre");
        if (pres.getLength()>0) {
            String route = pres.item(0).getTextContent();
            return route;
        }
        else {
            return null;
        }
    }
    
    /**
     * parse the detailed route information to a list of waypoints.
     * 
     * The detailed route information is a multi line string containing a 
     * table with an headline and waypoint data (ident, coordinates) organized 
     * in fixed width columns. All fields but "ID" and "Coords" are ignored.
     * 
     * Example:
     * <pre>
     * ID      FREQ   TRK   DIST   Coords                       Name/Remarks
     * EKYT             0      0   N57°05'34.04" E009°50'56.99" AALBORG
     * KUVUS           70     40   N57°20'16.57" E011°00'00.00" KUVUS
     * MAKUR           69     14   N57°25'47.00" E011°24'25.00" MAKUR
     * ELBUX           70     20   N57°33'18.60" E011°58'36.70" ELBUX
     * DEGAV           50     16   N57°43'41.00" E012°20'24.80" DEGAV
     * LABAN           51     40   N58°10'09.80" E013°17'39.50" LABAN
     * DETSO           52     40   N58°36'00.00" E014°15'51.70" DETSO
     * GIMLO           85     50   N58°42'25.20" E015°50'36.80" GIMLO
     * NILUG           87     64   N58°48'57.00" E017°53'05.00" NILUG
     * NEBSI           90     95   N58°54'17.90" E020°56'28.50" NEBSI
     * LUXEM           79     73   N59°14'02.00" E023°12'25.00" LUXEM
     * OSMUR           91      8   N59°14'57.00" E023°28'33.00" OSMUR
     * EETN            83     43   N59°24'48.00" E024°49'57.00" LENNART MERI TALLINN
     * </pre>
     * 
     * This method returns {@code null} if the detailed route information does 
     * not match the given format.
     * 
     * 
     * @param detailedRouteInformation  the table of waypoints
     * @return a list of {@link Waypoint}s of {@code null}, if the 
     *              detailedRouteInformation is invalid.
     */
    private List<Waypoint> parseDetailedRouteInformation(String detailedRouteInformation) {
        try {
            BufferedReader reader = new BufferedReader(new StringReader(detailedRouteInformation));
            List<Waypoint> route = new ArrayList<>();

            String line = reader.readLine();
            int identStart  = line.indexOf("ID");
            int identStop   = line.indexOf("FREQ");
            int coordsStart = line.indexOf("Coords");
            int coordsStop  = line.indexOf("Name/Remarks");
            line = reader.readLine();
            while (line!=null) {
                String coords = line.substring(coordsStart, coordsStop).trim();
                String[] latlon = coords.split(" ");
                
                Waypoint wp = new Waypoint();
                wp.ident = line.substring(identStart,identStop).trim();
                wp.lat = Calculus.parseDegreeToDecimal(latlon[0].trim());
                wp.lon = Calculus.parseDegreeToDecimal(latlon[1].trim());
                route.add(wp);
                
                line = reader.readLine();
            }
            
            return Collections.unmodifiableList(route);
            
        } catch (IOException ex) {
            L.error(ex, "Failed to extract route.");
        }
        return null;
    }
    
    /**
     * a representation of the RouteFinder form.
     */
    public static class RouteFinderForm {
        private final HTMLInputElement departureInput;
        private final HTMLInputElement destinationInput;
        private final HTMLFormElement  form;

        public RouteFinderForm(HTMLFormElement form, 
                HTMLInputElement departureInput, 
                HTMLInputElement destinationInput) 
        {
            this.departureInput = departureInput;
            this.destinationInput = destinationInput;
            this.form = form;
        }
        
        public void setDeparture(String icao) {
            departureInput.setValue(icao);
        }
        
        public void setDestination(String icao) {
            destinationInput.setValue(icao);
        }
        
        public void submit() {
            form.submit();
        }
    }
}
